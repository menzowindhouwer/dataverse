---
name: Container Images

on:
    push:
        branches:
            - 'develop\+ct'
        paths-ignore:
            - 'doc/**'
    pull_request:
        branches:
            - 'develop\+ct'
        paths-ignore:
            - 'doc/**'


env:
    REGISTRY: ghcr.io
    IMAGE_TAG: nightly

jobs:
    build-and-push-image:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Set up JDK 11
              uses: actions/setup-java@v2
              with:
                  java-version: 11
                  distribution: 'adopt'
            - name: Cache Maven packages
              uses: actions/cache@v2
              with:
                  path: ~/.m2
                  key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                  restore-keys: ${{ runner.os }}-m2

            - name: Build container images
              run: mvn -Pct package -Dct.build.tag="${IMAGE_TAG}" -Dct.build.registry="${REGISTRY}"

            - name: Scan Dataverse Container Image for vulnerabilities
              # https://github.com/aquasecurity/trivy-action
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: ${{ env.REGISTRY }}/gdcc/dataverse-k8s:${{ env.IMAGE_TAG }}
                  format: template
                  template: '@/contrib/sarif.tpl'
                  severity: CRITICAL, HIGH
                  ignore-unfixed: true
                  output: trivy-results.sarif
            - name: Upload scan results as SARIF report to GitHub Security Tab
              uses: github/codeql-action/upload-sarif@v1
              with:
                  sarif_file: trivy-results.sarif

            - name: Log in to the Container registry
              uses: docker/login-action@v1
              if: ${{ github.event_name == 'push' }}
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Push Docker image
              if: ${{ github.event_name == 'push' }}
              run: mvn -Pct docker:push -Dct.build.tag="${IMAGE_TAG}" -Dct.build.registry="${REGISTRY}"
